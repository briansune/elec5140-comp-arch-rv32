// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.


// Generated by Quartus Prime Version 17.1 (Build Build 590 10/25/2017)
// Created on Fri Apr 12 05:35:10 2019

sdram_ctrl sdram_ctrl_inst
(
	.wr_addr(wr_addr_sig) ,	// input [HADDR_WIDTH-1:0] wr_addr_sig
	.wr_data(wr_data_sig) ,	// input [15:0] wr_data_sig
	.wr_enable(wr_enable_sig) ,	// input  wr_enable_sig
	.rd_addr(rd_addr_sig) ,	// input [HADDR_WIDTH-1:0] rd_addr_sig
	.rd_data(rd_data_sig) ,	// output [15:0] rd_data_sig
	.rd_ready(rd_ready_sig) ,	// output  rd_ready_sig
	.rd_enable(rd_enable_sig) ,	// input  rd_enable_sig
	.busy(busy_sig) ,	// output  busy_sig
	.rst_n(rst_n_sig) ,	// input  rst_n_sig
	.clk(clk_sig) ,	// input  clk_sig
	.addr(addr_sig) ,	// output [SDRADDR_WIDTH-1:0] addr_sig
	.bank_addr(bank_addr_sig) ,	// output [BANK_WIDTH-1:0] bank_addr_sig
	.data(data_sig) ,	// inout [15:0] data_sig
	.clken(clken_sig) ,	// output  clken_sig
	.cs_n(cs_n_sig) ,	// output  cs_n_sig
	.ras_n(ras_n_sig) ,	// output  ras_n_sig
	.cas_n(cas_n_sig) ,	// output  cas_n_sig
	.we_n(we_n_sig) ,	// output  we_n_sig
	.data_mask_low(data_mask_low_sig) ,	// output  data_mask_low_sig
	.data_mask_high(data_mask_high_sig) 	// output  data_mask_high_sig
);

defparam sdram_ctrl_inst.ROW_WIDTH = 12;
defparam sdram_ctrl_inst.COL_WIDTH = 8;
defparam sdram_ctrl_inst.BANK_WIDTH = 2;
//defparam sdram_ctrl_inst.SDRADDR_WIDTH = ;
//defparam sdram_ctrl_inst.HADDR_WIDTH = ;
defparam sdram_ctrl_inst.CLK_FREQUENCY = 100;
defparam sdram_ctrl_inst.REFRESH_TIME = 64;
defparam sdram_ctrl_inst.REFRESH_COUNT = 8192;
